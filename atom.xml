<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lcrnice</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lcrnice.github.com/"/>
  <updated>2016-07-02T10:49:43.000Z</updated>
  <id>http://lcrnice.github.com/</id>
  
  <author>
    <name>Lcrnice</name>
    <email>lcrnice@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>帮你做一个整洁又正经的Branch</title>
    <link href="http://lcrnice.github.com/2016/07/02/%E5%B8%AE%E4%BD%A0%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%B4%81%E5%8F%88%E6%AD%A3%E7%BB%8F%E7%9A%84branch/"/>
    <id>http://lcrnice.github.com/2016/07/02/帮你作一个整洁又正经的branch/</id>
    <published>2016-07-02T06:25:24.000Z</published>
    <updated>2016-07-02T10:49:43.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/git:GitPullRebase.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;团队协作开发中，都会用到&lt;a href=&quot;https://zh.wikipedia.org/wiki/VCS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;版本控制系统(VCS)&lt;/code&gt;&lt;/a&gt;，通过ta我们能高效、便捷的控制团队中的代码和文件。相比较于SVN，&lt;a href=&quot;https://zh.wikipedia.org/wiki/Git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;作为分散式版本控制系統，对于&lt;code&gt;分支(branch)&lt;/code&gt;的操作更加健全，通过将开发(develop)、新特性(feature)、热修复(hotfix)等模块化的操作，放到特定分支进行操作，方便管理和推进。在此需求上衍生出了Git的一个扩展集——&lt;a href=&quot;http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-flow&lt;/a&gt;，能够非常方便的在各个分支间进行操作。但是在&lt;code&gt;Branch&lt;/code&gt;带给我们这么多便利的同时，也给我们的维护带来了一些常见的问题。&lt;/p&gt;
&lt;h3 id=&quot;Q：&quot;&gt;&lt;a href=&quot;#Q：&quot; class=&quot;headerlink&quot; title=&quot;Q：&quot;&gt;&lt;/a&gt;Q：&lt;/h3&gt;&lt;p&gt;团队多人开发时，你在使用&lt;a href=&quot;http://gitx.frim.nl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitX&lt;/a&gt;查看代码log时，是否遇到过这样的情况…&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/git:confusionBranches.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;好吧，可能一般不会有这么混乱的分支结构，但如果不多加留意的话，你们团队的分支结构也会很难分辨，给维护分支带来了很大的困难。所以我们心中都希望分支是这样的…&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/git:cleanBranches.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;当前&lt;code&gt;Branch&lt;/code&gt;中，每一次commit都很清晰，正式我们所想要的。  &lt;/p&gt;
&lt;p&gt;那么让分支中像图1这么混乱的的原因是什么呢？如何避免产生这种无意义的分支呢？  (｡•ˇ‸ˇ•｡)  &lt;/p&gt;
&lt;h3 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A:&quot;&gt;&lt;/a&gt;A:&lt;/h3&gt;&lt;p&gt;原因：&lt;br&gt;在获取代码时，我们通常会使用&lt;code&gt;git pull&lt;/code&gt;来拉取origin的代码。而这一步操作，本质上是&lt;code&gt;fetch&lt;/code&gt;+&lt;code&gt;merge&lt;/code&gt;的结合体，如果只有一个人对远端仓库进行管理的话，不会出现上述问题，但是多人频繁对同一个远端Branch进行操作的话，会因为拉取代码后local和remote对同一文件都进行了修改，git pull会在&lt;code&gt;fetch&lt;/code&gt;后对这部分修改自动将本地repo和远端repo进行&lt;code&gt;merge&lt;/code&gt;操作，并在终端中提示你当前的merge branch，这就造成了上图充满了&lt;em&gt;梦幻色彩&lt;/em&gt;的Branch结构。  &lt;/p&gt;
&lt;p&gt;解决方案：&lt;br&gt;使用&lt;code&gt;git pull --rebase&lt;/code&gt;替代&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;git-pull-–rebase&quot;&gt;&lt;a href=&quot;#git-pull-–rebase&quot; class=&quot;headerlink&quot; title=&quot;git pull –rebase&quot;&gt;&lt;/a&gt;git pull –rebase&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;--rebase&lt;/code&gt;时，Git会先将本地的repo暂存起来，并从上次pull时的状态下拉取远端最新的代码，最后在套用本地的变更。这种样相当于对本地Branch进行了一步&lt;code&gt;对齐&lt;/code&gt;的操作，这就避免了git pull带来的一些不必要的Merge Branch。&lt;br&gt;这里有一个小细节需要注意：基于如上所说的操作，本地repo相当于重新提交，SHA-1会变，并且会作为最后一次commit(但是提交时间不变)。&lt;/p&gt;
&lt;h3 id=&quot;关于解决冲突&quot;&gt;&lt;a href=&quot;#关于解决冲突&quot; class=&quot;headerlink&quot; title=&quot;关于解决冲突&quot;&gt;&lt;/a&gt;关于解决冲突&lt;/h3&gt;&lt;h4 id=&quot;Merge-解决冲突&quot;&gt;&lt;a href=&quot;#Merge-解决冲突&quot; class=&quot;headerlink&quot; title=&quot;Merge 解决冲突&quot;&gt;&lt;/a&gt;Merge 解决冲突&lt;/h4&gt;&lt;p&gt;使用merge时，发生了冲突，merge会在当前分支中提示你存在冲突，当你修改冲突后，需要在把修改作为一次commit提交到当前分支。&lt;/p&gt;
&lt;h4 id=&quot;Rebase-解决冲突&quot;&gt;&lt;a href=&quot;#Rebase-解决冲突&quot; class=&quot;headerlink&quot; title=&quot;Rebase 解决冲突&quot;&gt;&lt;/a&gt;Rebase 解决冲突&lt;/h4&gt;&lt;p&gt;使用rebase时，发生冲突时，Git会自动切换到一个新建的临时分支。当在临时分支中解决冲突后，需要&lt;code&gt;git add .&lt;/code&gt;将修改加入暂存区(stage area)，在运行&lt;code&gt;git rebase --continue&lt;/code&gt;继续rebase，Git会自动切换回原本的分支，此时就完成了冲突的解决，并且&lt;code&gt;不会新增commit&lt;/code&gt;，解决冲突的代码归属于本地repo。  &lt;/p&gt;
&lt;p&gt;rebase时有多个commit发生冲突，需要解决多次…所以说，rebase在带来整洁、正经分支的同时，也可能会浪费你很多时间来解决冲突，较大规模的代码合并还是推荐使用merge。&lt;/p&gt;
&lt;h3 id=&quot;“偷懒”技巧&quot;&gt;&lt;a href=&quot;#“偷懒”技巧&quot; class=&quot;headerlink&quot; title=&quot;“偷懒”技巧&quot;&gt;&lt;/a&gt;“偷懒”技巧&lt;/h3&gt;&lt;p&gt;如果我们希望一直采用&lt;code&gt;--rebase&lt;/code&gt;的操作，但是有感觉有时候会忘记加，还需要reset之后重新操作。那么我就在告诉你一个“偷懒”的技巧~&lt;br&gt;为当前项目配置rebase操作：&lt;br&gt;进入.git路径，打开config配置文件，在当前分支配置选项中加入&lt;code&gt;rebase = ture&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[branch &amp;quot;yourBranch&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remote = origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    merge = refs/heads/yourBranch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rebase = true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为mac中所有项目配置rebase操作：&lt;br&gt;直接加到~/.gitconfig中，让所有追踪的Branch都遵守这个规则&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[branch]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  autosetuprebase = always&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h3&gt;&lt;p&gt;遵循以上的方式，你就已经做出了一个‘整洁又正经的Branch’了~ 在版本记录中，看着一条整齐划一的提交线，方便管理的同时，心中轻微的强迫症也得到了些许治愈 (❁´▽`❁)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/git:GitPullRebase.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;团队协作开发中，都会用到&lt;a href=&quot;https://zh.wikipedia.org/w
    
    </summary>
    
    
      <category term="iOS" scheme="http://lcrnice.github.com/tags/iOS/"/>
    
      <category term="Git" scheme="http://lcrnice.github.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[面膜时间]的前世今生（一）</title>
    <link href="http://lcrnice.github.com/2016/05/16/%E9%9D%A2%E8%86%9C%E6%97%B6%E9%97%B4-%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lcrnice.github.com/2016/05/16/面膜时间-的前世今生（一）/</id>
    <published>2016-05-16T09:42:17.000Z</published>
    <updated>2016-05-19T07:18:48.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/blog:masktime_splash.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;这是一个亦产品、亦开发的人，对他曾经做过的一款产品——&lt;a href=&quot;https://itunes.apple.com/cn/app/mian-mo-shi-jian-rang-mian/id985477146?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;面膜时间&lt;/a&gt;的纪念。之所以称之为&lt;code&gt;“纪念”&lt;/code&gt;，是因为…可能&lt;code&gt;她&lt;/code&gt;再也不会有新的改动了。  &lt;/p&gt;
&lt;h2 id=&quot;记得最初我们的相遇&quot;&gt;&lt;a href=&quot;#记得最初我们的相遇&quot; class=&quot;headerlink&quot; title=&quot;-记得最初我们的相遇-&quot;&gt;&lt;/a&gt;-记得最初我们的相遇-&lt;/h2&gt;&lt;p&gt;第一次见到[面膜时间]，是在方驰设计的设计图上。当时的她只有tab上只有两个分类：面膜计时、我的面膜。首页表盘上的淡粉色是&lt;strong&gt;基础面膜时间&lt;/strong&gt;，墨绿色是根据肤质生成的&lt;strong&gt;面膜加成时间&lt;/strong&gt;。淡粉色的基调，简洁明了的设计，让我对即将开始的开发跃跃欲试。&lt;br&gt;然而真正开始开发之后，办公室里最多的就是争执的声音。需求的增加，产品细节的调整，让整个APP的研发速度受到了很大的影响。但是，随着争吵的减少，慢慢&lt;code&gt;第一版&lt;/code&gt;面膜时间也终于浮出水面↓&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/blog:masktime_v1_timing.png&quot; alt=&quot;mt_v1_timer&quot;&gt;&lt;br&gt;第一版[面膜时间]有两点主要功能：&lt;br&gt;1.&lt;em&gt;针对不同肤质进行准确计时&lt;/em&gt;&lt;br&gt;2.&lt;em&gt;提供相应建议（计划）&lt;/em&gt;&lt;br&gt;&lt;strong&gt;功能1&lt;/strong&gt; 妹子可以通过&lt;code&gt;肤质测试&lt;/code&gt;让[面膜时间]知道你的肤质属于偏油、偏干还是混合，然后[面膜时间]会自动把这个时间计算到当前的总时间中去，显示为&lt;em&gt;墨绿色的进度条&lt;/em&gt;（by the way, 下面的八个按钮，就是妹子手里面膜的类型）。当计时完成还会有铃音提示↓&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/blog:masktime_v1_timeout.png&quot; alt=&quot;mt_v1_timeout&quot;&gt;&lt;br&gt;上图中增加积分中有一个&lt;code&gt;完成建议&lt;/code&gt;，就是第一版中的&lt;strong&gt;功能2&lt;/strong&gt;&lt;code&gt;建议&lt;/code&gt;↓&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/blog:masktime_v1_%20advice.png&quot; alt=&quot;mt_v1_suggest&quot;&gt;&lt;br&gt;建议类似于&lt;strong&gt;计划&lt;/strong&gt;，但当时产品层面考虑再三，觉得建议的感觉跟温和，就采用了这个词。上图&lt;strong&gt;计时&lt;/strong&gt;tab中，&lt;strong&gt;水&lt;/strong&gt;字选中会有一个小红心在右上角，就说明当前选中的面膜类型是推荐的。妹子听话的按建议走，会有更多积分奖励 (〃∀〃)~♡&lt;br&gt;『第一版主要实现的功能就是&lt;strong&gt;计时&lt;/strong&gt;，从工具入手，给爱敷面膜的妹子提供最方便的计时服务』  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt6wu.com1.z0.glb.clouddn.com/blog:masktime_splash.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;这是一个亦产品、亦开发的人，对他曾经做过的一款产品——&lt;a href=&quot;https://
    
    </summary>
    
    
      <category term="iOS" scheme="http://lcrnice.github.com/tags/iOS/"/>
    
      <category term="MaskTime" scheme="http://lcrnice.github.com/tags/MaskTime/"/>
    
  </entry>
  
  <entry>
    <title>Method Swizzling的剖析与实践</title>
    <link href="http://lcrnice.github.com/2016/04/23/Method-Swizzling%E7%9A%84%E5%89%96%E6%9E%90%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://lcrnice.github.com/2016/04/23/Method-Swizzling的剖析与实践/</id>
    <published>2016-04-23T15:50:17.000Z</published>
    <updated>2016-05-16T09:43:20.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:methodSwizzingExchange.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;在iOS开发中，有时我们会有这样的需求：想改变某一个系统类的实现，但在项目中逐一修改工作量太过于庞大，这时&lt;strong&gt;Method Swizzling&lt;/strong&gt;就显现出了ta的强大。&lt;/p&gt;
&lt;p&gt;Method Swizzling是针对Objective-C中selector实现hook的方法，基于OC中的动态特性runtime，达到替换方法的目的。&lt;/p&gt;
&lt;h2 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h2&gt;&lt;p&gt;想理解Method Swizzling就需要了解Objective-C的基础&lt;strong&gt;消息机制&lt;/strong&gt;。OC中的每一个类都有一个&lt;code&gt;Dispatch Table&lt;/code&gt;，将每个方法的名字&lt;code&gt;SEL&lt;/code&gt;（一个C字符串）与方法的实现&lt;code&gt;IMP&lt;/code&gt;（指向方法实现函数开始位置的指针）分别对应起来。当我们执行方法A时，OC就会从Dispatch Table中找出方法A所对应的函数IMP，如果找到则执行函数内的代码，如下：&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:originDispatchTable.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;Method Swizzling其实就是利用OC的动态特性，利用runtime把方法A的实现与方法B的实现进行交换。&lt;br&gt;例如：我希望在每个视图控制器的-viewWillAppear执行后，在控制台输出&lt;code&gt;@&amp;quot;yoho, swift~&amp;quot;&lt;/code&gt;。那么就可以用一个新的方法-cr_viewWillAppear来替换系统API，cr_viewWillAppear中打印类名，通过Method Swizzling替换后，当前类的Dispatch Table如下：&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:swizzlingDispatchTable.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;Swizzling后，当前我们在-viewWillAppear中调用&lt;code&gt;[super viewWillAppear:animated];&lt;/code&gt;时，则会调用重定向后-cr_viewWillAppear方法的实现；在-cr_viewWillAppear中调用&lt;code&gt;[self cr_viewWillAppear:animated];&lt;/code&gt;时，则会调用系统-viewWillAppear的实现。这也是为什么在Swizzling后不会出现递归的根本原因。&lt;/p&gt;
&lt;h2 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; title=&quot;具体实现&quot;&gt;&lt;/a&gt;具体实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Method Swizzling是非原子性的，因此，应该放在&lt;code&gt;dispatch_once&lt;/code&gt;中执行，确保Swizzling代码只执行一次。&lt;/strong&gt;同样的，包含Method Swizzling的dispatch_once代码，应该放在&lt;code&gt;+(void)load&lt;/code&gt;方法中调用。(之所以不选择+initialize方法，是因为+load会在类初始加载时调用，而+initialize方法当前类的实例方法或类方法被调用时才执行，会增加程序中的不确定因素，可能导致并发问题),实例方法的例子：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;objectivec&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;CRSwizzling&lt;/span&gt;)&lt;/span&gt;

+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load {
    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cr_swizzlingMethod:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(viewWillAppear:)
                  withAltSEL:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(cr_viewWillAppear:)];
}

&lt;span class=&quot;meta&quot;&gt;#pragma mark - Method Swizzling&lt;/span&gt;
+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)cr_swizzlingMethod:(SEL)originSEL withAltSEL:(SEL)altSEL {
    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;
    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^{
        Class class = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class];

        SEL originalSelector = originSEL;
        SEL swizzledSelector = altSEL;

        Method originalMethod = class_getInstanceMethod(class, originalSelector);
        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);

        &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; didAddMethod = class_addMethod(class,
                                            originalSelector,
                                            method_getImplementation(swizzledMethod),
                                            method_getTypeEncoding(swizzledMethod));
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (didAddMethod) {

            class_replaceMethod(class,
                                swizzledSelector,
                                method_getImplementation(originalMethod),
                                method_getTypeEncoding(originalMethod));
        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
            method_exchangeImplementations(originalMethod, swizzledMethod);
        }

    });
}

&lt;span class=&quot;meta&quot;&gt;#pragma mark - Custom Method&lt;/span&gt;
- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)cr_viewWillAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated {
    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cr_viewWillAppear:animated];
    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;yoho, swift~&quot;&lt;/span&gt;);
}

&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当有继承关系的类存在时，Swizzling会从父类开始。&lt;/strong&gt;例如一个视图控制器SubViewController继承于ViewController，那么当SubViewController需要走Swizzling方法时，发现已经在父类中使用&lt;code&gt;dispatch_once&lt;/code&gt;执行过了，那么SubViewController的-viewWillAppear就会在调用&lt;code&gt;[super viewWillAppear:animated];&lt;/code&gt;时，执行父类Swizzling时走过的步骤。&lt;br&gt;显示viewController的时候，控制台输出：&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:swizzlingControl01.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;显示SubViewController的时候，控制台输出：&lt;br&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:swizzlingControl02.png&quot; alt=&quot;overview&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上讲解的demo在-&amp;gt;&lt;a href=&quot;https://github.com/Lcrnice/MethodSwizzlingDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;注意事项-amp-讨论&quot;&gt;&lt;a href=&quot;#注意事项-amp-讨论&quot; class=&quot;headerlink&quot; title=&quot;注意事项 &amp;amp; 讨论&quot;&gt;&lt;/a&gt;注意事项 &amp;amp; 讨论&lt;/h2&gt;&lt;p&gt;Swizzling是基于runtime的一种&lt;em&gt;巴拉巴拉魔法&lt;/em&gt;，所以最好遵循一些原则，避免出现&lt;em&gt;魔法四溢&lt;/em&gt;的现象。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需要调用父类原始方法。&lt;/strong&gt;毕竟我们不知道闭源的原始方法内部实现是什么╮(╯_╰)╭&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;给重定向的方法加前缀。&lt;/strong&gt;类似于示例demo中的cr_xx，避免出现冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需使用。&lt;/strong&gt;对于runtime的&lt;em&gt;巴拉巴拉魔法&lt;/em&gt;，用好了是利刃可以势如破竹，用不好反而容易伤到自己。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;推荐&quot;&gt;&lt;a href=&quot;#推荐&quot; class=&quot;headerlink&quot; title=&quot;推荐&quot;&gt;&lt;/a&gt;推荐&lt;/h2&gt;&lt;p&gt;其实如上这种，通过Method Swizzling动态更改方法的方式被称为——&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E4%BE%A7%E9%9D%A2%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspect Oriented Programming（面向切面编程）&lt;/a&gt;，简称AOP。&lt;br&gt;关于Objective-C中的AOP应用，GitHub上已经有了很棒的库——&lt;a href=&quot;https://github.com/steipete/Aspects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspects&lt;/a&gt;。Aspects通过runtime封装了一套很完善的hook方案，在日常项目中如果需要使用Method Swizzling，可以直接用CocoaPods导入&lt;a href=&quot;https://github.com/steipete/Aspects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspects&lt;/a&gt;，使用起来也非常便捷。  &lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;h4 id=&quot;参考资源&quot;&gt;&lt;a href=&quot;#参考资源&quot; class=&quot;headerlink&quot; title=&quot;参考资源:&quot;&gt;&lt;/a&gt;参考资源:&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://nshipster.com/method-swizzling/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Method Swizzling&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/yiyaaixuexi/article/details/9374411&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C的hook方案（一）: Method Swizzling&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the Dangers of Method Swizzling in Objective C?&lt;/a&gt;  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:methodSwizzingExchange.png&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;在iOS开发中，有时我们会有这样的需求：想改变某一个系统类的实现，但在项目
    
    </summary>
    
    
      <category term="iOS" scheme="http://lcrnice.github.com/tags/iOS/"/>
    
      <category term="runtime" scheme="http://lcrnice.github.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发工具2016</title>
    <link href="http://lcrnice.github.com/2016/04/20/iOS%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B72016/"/>
    <id>http://lcrnice.github.com/2016/04/20/iOS开发工具2016/</id>
    <published>2016-04-20T04:15:15.000Z</published>
    <updated>2016-05-16T09:44:32.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:myiOSDevelopmentToolKit_img.jpeg&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;本文列举了我最近正在用的一些工具，包括：iOS开发工具，网站，服务以及框架。&lt;/p&gt;
&lt;h2 id=&quot;服务类&quot;&gt;&lt;a href=&quot;#服务类&quot; class=&quot;headerlink&quot; title=&quot;服务类&quot;&gt;&lt;/a&gt;服务类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://get.fabric.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fabric&lt;/a&gt;针对你iOS Apps的一款模块化、跨平台的移动开发套件&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/testflight/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testflight&lt;/a&gt;是原生的测试平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://smooch.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SupportKit&lt;/a&gt;或&lt;a href=&quot;https://smooch.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smooch&lt;/a&gt;是一款很棒的信息传递SDK，我最近正在通过它来获取用户的反馈消息&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mixpanel.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mixpanel&lt;/a&gt;移动端分析工具&lt;/li&gt;
&lt;li&gt;我通过&lt;a href=&quot;https://trello.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Trello&lt;/a&gt;来管理我的私有项目&lt;/li&gt;
&lt;li&gt;在团队协作中，我更偏爱使用&lt;a href=&quot;https://de.atlassian.com/software/jira&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JIRA&lt;/a&gt;配合&lt;a href=&quot;https://en.wikipedia.org/wiki/Scrum_%28software_development%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SCRUM&lt;/a&gt;和&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitflow Workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具类&quot;&gt;&lt;a href=&quot;#工具类&quot; class=&quot;headerlink&quot; title=&quot;工具类&quot;&gt;&lt;/a&gt;工具类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;a href=&quot;https://fastlane.tools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fastlane&lt;/a&gt;让你的持续化交付更简单&lt;/li&gt;
&lt;li&gt;我使用&lt;a href=&quot;https://luckymarmot.com/de/paw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PAW&lt;/a&gt;进行测试和编辑APIs&lt;/li&gt;
&lt;li&gt;找出内存泄露等问题使用&lt;a href=&quot;https://developer.apple.com/library/watchos/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Instruments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/realm/jazzy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jazzy&lt;/a&gt;是一款命令行使用程序，用于生成Swift或Objective-C的文档&lt;/li&gt;
&lt;li&gt;如果你使用GIT，我强烈推荐&lt;a href=&quot;https://www.sourcetreeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Source Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当需要使用Ruby或者Python来工作时，我更喜欢使用&lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom&lt;/a&gt;来替代Xcode&lt;/li&gt;
&lt;li&gt;一款很棒的Xcode插件管理工具&lt;a href=&quot;http://alcatraz.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alcatraz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cocoapods.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cocoa Pods&lt;/a&gt;是一款帮助iOS应用管理依赖库的系统&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carthage&lt;/a&gt;是一款用于Cocoa的，简洁的分散式依赖管理工具&lt;/li&gt;
&lt;li&gt;如果你想查看设备中的&lt;strong&gt;&lt;em&gt;HTTP-Request&lt;/em&gt;&lt;/strong&gt;，那就使用&lt;a href=&quot;https://www.charlesproxy.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Charles&lt;/a&gt;吧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/chisel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chisel&lt;/a&gt;帮助你用&lt;strong&gt;&lt;em&gt;LLDB&lt;/em&gt;&lt;/strong&gt;命令进行调试&lt;/li&gt;
&lt;li&gt;让图像变成代码&lt;a href=&quot;http://www.paintcodeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paint Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://icons8.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Icons8 App&lt;/a&gt;提供了23,400免费的图标&lt;/li&gt;
&lt;li&gt;如果你想找Mac OS上Photoshop的替代品，&lt;a href=&quot;http://www.pixelmator.com/mac/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pixelmator&lt;/a&gt;是一个很棒的选择&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;框架-amp-函数库&quot;&gt;&lt;a href=&quot;#框架-amp-函数库&quot; class=&quot;headerlink&quot; title=&quot;框架 &amp;amp; 函数库&quot;&gt;&lt;/a&gt;框架 &amp;amp; 函数库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Objective-C中，网络请求最便捷的当然是&lt;a href=&quot;http://afnetworking/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Swift中，网络请求可以使用&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alamofire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/Tweaks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FBTweaks&lt;/a&gt;在Runtime中操作参数是个不错的选择&lt;/li&gt;
&lt;li&gt;Git分支处理&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitflow Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realm.io/docs/swift/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt;是一款Core Data的替代品&lt;/li&gt;
&lt;li&gt;为了更便捷、高效，在Swift项目中使用&lt;a href=&quot;https://github.com/mac-cain13/R.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;R.swift&lt;/a&gt;可以自动联想image, fonts, segues&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/conopsys/COSTouchVisualizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;COSTouchVisualizer&lt;/a&gt;显现你在iPhone或iPad上的轻拍、手势和长按等操作&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/realm/SwiftLint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwiftLint&lt;/a&gt;是一款强制约束你Swif代码风格和规范的工具，当不遵守规范时会直接在Xcode中报错误或警告&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;博客-amp-网站&quot;&gt;&lt;a href=&quot;#博客-amp-网站&quot; class=&quot;headerlink&quot; title=&quot;博客 &amp;amp; 网站&quot;&gt;&lt;/a&gt;博客 &amp;amp; 网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.raywenderlich.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ray Wenderlich&lt;/a&gt;提供了很多高质量的编程教程&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nshipster.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSHipster&lt;/a&gt;是一个杂志，介绍了平时被忽略的，Objective-C, Swift和Cocoa中的知识点，每周更新&lt;/li&gt;
&lt;li&gt;每周更新iOS开发的视频&lt;a href=&quot;http://nsscreencast.com/episodes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSScreencast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个优质的博客&lt;a href=&quot;https://www.natashatherobot.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Natasha the Robot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;为你的项目创建可用的.gitignore文件&lt;a href=&quot;https://www.gitignore.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitignore.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pttrns.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pttrns&lt;/a&gt;收集了很多设计资源和灵感&lt;/li&gt;
&lt;li&gt;你可以在&lt;a href=&quot;https://iosdev.tools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOSDev.tools&lt;/a&gt;找到很多iOS相关的工具和资源&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cocoacontrols.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cocoa Controls&lt;/a&gt;提供了4200个iOS和OS X上的开源UI组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;播客&quot;&gt;&lt;a href=&quot;#播客&quot; class=&quot;headerlink&quot; title=&quot;播客&quot;&gt;&lt;/a&gt;播客&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coreint.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Intuition&lt;/a&gt;是一个关于Mac, iOS和其他Apple技术的，独立软件开发播客&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devchat.tv/iphreaks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iPhreaks&lt;/a&gt;是一个讨论平台，既有iOS相关技术，也有其他方面的内容，每周更新&lt;/li&gt;
&lt;li&gt;非常棒的App开发博客&lt;a href=&quot;https://www.raywenderlich.com/rwpodcast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The RayWenderlich.com Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;gt-译文源文《My-iOS-Development-Toolkit-2016》&quot;&gt;&lt;a href=&quot;#gt-译文源文《My-iOS-Development-Toolkit-2016》&quot; class=&quot;headerlink&quot; title=&quot;-&amp;gt;译文源文《My iOS Development Toolkit 2016》&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://medium.com/ios-os-x-development/my-ios-development-toolkit-2016-ba7601b68085#.s6m9uc3wl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;-&amp;gt;&lt;strong&gt;&lt;em&gt;译文源文《My iOS Development Toolkit 2016》&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;—————————————————————————————————————————————————————————&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原文中推荐的很多服务都是在国外非常受欢迎的，但是有一部分服务是&lt;strong&gt;&lt;em&gt;付费&lt;/em&gt;&lt;/strong&gt;的，可以按需选取。国内也有&lt;a href=&quot;http://www.umeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;友盟&lt;/a&gt;、&lt;a href=&quot;http://fir.im&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fir&lt;/a&gt;等类似的免费平台。&lt;/li&gt;
&lt;li&gt;工具类都是大家耳熟能详的库，使用GIT在可视化工具上，个人更偏向于&lt;a href=&quot;https://www.git-tower.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tower&lt;/a&gt;，可以配合其他对比软件(eg:&lt;a href=&quot;http://www.kaleidoscopeapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kaleidoscope&lt;/a&gt;)，在查看修改部分的代码时非常方便；当需要编写其他语言时，个人认为&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime Text&lt;/a&gt;很强大，可以安装需要的插件，居家必备。&lt;/li&gt;
&lt;li&gt;框架和函数库数不胜数，原文只列举了一些非常有名、好用的库，如果就此展开讨论，一篇博客恐怕是不够的。&lt;/li&gt;
&lt;li&gt;相比于国外的博客，可能国内的开发者更偏向于查看国内的博客，但原文推荐的博客和网址都属精品，都强烈推荐。(&lt;a href=&quot;https://www.objc.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc&lt;/a&gt;原文并没有介绍，不知为何)&lt;/li&gt;
&lt;li&gt;相比于博客，国外播客就显得有些鸡肋，看博客还好，听播客可就没那么愉悦了 (￣﹏￣)&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt6wu.com2.z0.glb.clouddn.com/blog:myiOSDevelopmentToolKit_img.jpeg&quot; alt=&quot;overview&quot;&gt;&lt;br&gt;本文列举了我最近正在用的一些工具，包括：iOS开发工具，网站，
    
    </summary>
    
    
      <category term="iOS" scheme="http://lcrnice.github.com/tags/iOS/"/>
    
      <category term="工具" scheme="http://lcrnice.github.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello world</title>
    <link href="http://lcrnice.github.com/2016/04/18/Hello-world/"/>
    <id>http://lcrnice.github.com/2016/04/18/Hello-world/</id>
    <published>2016-04-18T13:11:53.000Z</published>
    <updated>2016-04-18T13:26:02.000Z</updated>
    
    <content type="html">&lt;p&gt;其实我是一个很懒的人，不然不会现在才开始写博客  ╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;人性本就如此，不然世间也就不会多是碌碌无为之人了。&lt;/p&gt;
&lt;p&gt;最后:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;生活就像海洋，只有意志坚强的人，才能到达彼岸。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;其实我是一个很懒的人，不然不会现在才开始写博客  ╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;人性本就如此，不然世间也就不会多是碌碌无为之人了。&lt;/p&gt;
&lt;p&gt;最后:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
    
  </entry>
  
</feed>
